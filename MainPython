# Eddy-Yang HKU ME; HIT. -2024/7/24
# coppy all of those in to your VScode or something and start with 'RUN'.
# Interact with UI, setting the parameters. After all parameters set, the operating Gcode would be generated to Desk.
# This programming is suitable for generating the filament net work, and irrating the testment procedures.
# 这个版本可以实现：任意层任意角度平行走线，自定义大小，快速生成参数组，实现模型快速迭代， 第二次更新 -2024/8/2

import math
import numpy as np
import os

def generate_semi_circle_points(x0, y0, direction, spacing, num_points, axis='X'):
    radius = spacing / 2
    if axis == 'X':
        mid_y = y0 + radius
        angles = np.linspace(-math.pi / 2, math.pi / 2, num_points)
        x_points = x0 + direction * radius * np.cos(angles)
        y_points = mid_y + radius * np.sin(angles)
    else:
        mid_x = x0 + radius
        angles = np.linspace(-math.pi / 2, math.pi / 2, num_points)
        x_points = mid_x + radius * np.sin(angles)
        y_points = y0 + direction * radius * np.cos(angles)
    return x_points, y_points

def generate_y_direction_gcode(e, spacing, resin_param, num_semi_circle_points, start_x, start_y, x_span, y_span):
    gcode_list = []
    x_left = start_x
    x_right = start_x + x_span
    y = start_y
    num_rows = int(y_span / spacing)

    for i in range(num_rows):
        if i % 2 == 0:
            new_x = x_right
            direction = 1
        else:
            new_x = x_left
            direction = -1

        if gcode_list:
            prev_x, prev_y = gcode_list[-1]['x'], gcode_list[-1]['y']
            distance = math.sqrt((new_x - prev_x) ** 2 + (y - prev_y) ** 2)
            e += distance * resin_param

        gcode = f"G1 X{new_x:.2f} Y{y:.2f} E{e:.4f}"
        gcode_list.append({'x': new_x, 'y': y, 'gcode': gcode})

        prev_x, prev_y = new_x, y
        x_points, y_points = generate_semi_circle_points(new_x, y, direction, spacing, num_semi_circle_points, axis='X')
        for x_point, y_point in zip(x_points, y_points):
            distance = math.sqrt((x_point - prev_x) ** 2 + (y_point - prev_y) ** 2)
            e += distance * resin_param
            gcode = f"G1 X{x_point:.2f} Y{y_point:.2f} E{e:.4f}"
            gcode_list.append({'x': x_point, 'y': y_point, 'gcode': gcode})
            prev_x, prev_y = x_point, y_point
        y += spacing

    return [item['gcode'] for item in gcode_list], e

def generate_x_direction_gcode(e, spacing, resin_param, num_semi_circle_points, start_x, start_y, x_span, y_span, offset):
    gcode_list = []
    y_left = start_y
    y_right = start_y + y_span
    x = start_x + offset
    num_rows = int(x_span / spacing)

    for i in range(num_rows):
        if i % 2 == 0:
            new_y = y_right
            direction = 1
        else:
            new_y = y_left
            direction = -1

        if gcode_list:
            prev_x, prev_y = gcode_list[-1]['x'], gcode_list[-1]['y']
            distance = math.sqrt((x - prev_x) ** 2 + (new_y - prev_y) ** 2)
            e += distance * resin_param

        gcode = f"G1 X{x:.2f} Y{new_y:.2f} E{e:.4f}"
        gcode_list.append({'x': x, 'y': new_y, 'gcode': gcode})

        prev_x, prev_y = x, new_y
        x_points, y_points = generate_semi_circle_points(x, new_y, direction, spacing, num_semi_circle_points, axis='Y')
        for x_point, y_point in zip(x_points, y_points):
            distance = math.sqrt((x_point - prev_x) ** 2 + (y_point - prev_y) ** 2)
            e += distance * resin_param
            gcode = f"G1 X{x_point:.2f} Y{y_point:.2f} E{e:.4f}"
            gcode_list.append({'x': x_point, 'y': y_point, 'gcode': gcode})
            prev_x, prev_y = x_point, y_point
        x += spacing

    return [item['gcode'] for item in gcode_list], e

def generate_angle_gcode(e, spacing, resin_param, num_semi_circle_points, start_x, start_y, x_span, y_span, degree):
    gcode_list = []
    k = np.tan(np.radians(degree))

    if k < 0:
        num_lines = int((start_y + y_span - k * (start_x + x_span)) / spacing)
        origin = (start_x, start_y)
        initial_b = start_y - k * start_x
    else:
        num_lines = int(((start_y + y_span - k * start_x) - (start_y - k * (start_x + x_span))) / spacing)
        origin = (start_x + x_span, start_y)
        initial_b = start_y - k * (start_x + x_span)

    intersection_points = set()
    lines = []
    missed_lines = []

    for n in range(num_lines + 1):
        b = initial_b + n * spacing
        line_points = []
        for x in [start_x, start_x + x_span]:
            y = k * x + b
            if start_y <= y <= start_y + y_span:
                line_points.append((x, y))
        for y in [start_y, start_y + y_span]:
            if k != 0:
                x = (y - b) / k
                if start_x <= x <= start_x + x_span:
                    line_points.append((x, y))

        unique_points = []
        for pt in line_points:
            if pt not in unique_points:
                unique_points.append(pt)

        if len(unique_points) == 2:
            lines.append(unique_points)
            intersection_points.update(unique_points)
        else:
            missed_lines.append((n, b))

    for n, b in missed_lines:
        if k < 0:
            if (start_x, start_y + y_span) not in intersection_points:
                new_b = start_y + y_span - k * start_x
                new_y = k * (start_x + x_span) + new_b
                if start_y <= new_y <= start_y + y_span:
                    lines.append([(start_x, start_y + y_span), (start_x + x_span, new_y)])
                    intersection_points.add((start_x, start_y + y_span))
                    intersection_points.add((start_x + x_span, new_y))
        else:
            if (start_x + x_span, start_y + y_span) not in intersection_points:
                new_b = start_y + y_span - k * (start_x + x_span)
                new_y = k * start_x + new_b
                if start_y <= new_y <= start_y + y_span:
                    lines.append([(start_x + x_span, start_y + y_span), (start_x, new_y)])
                    intersection_points.add((start_x + x_span, start_y + y_span))
                    intersection_points.add((start_x, new_y))

    sorted_points = [origin]
    for i, line in enumerate(lines):
        line.sort(key=lambda p: p[1])
        if i % 2 == 0:
            sorted_points.extend(line)
        else:
            sorted_points.extend(reversed(line))

    prev_x, prev_y = sorted_points[0]
    for x, y in sorted_points:
        distance = math.sqrt((x - prev_x) ** 2 + (y - prev_y) ** 2)
        e += distance * resin_param
        gcode = f"G1 X{x:.2f} Y{y:.2f} E{e:.4f}"
        gcode_list.append(gcode)
        prev_x, prev_y = x, y

    return gcode_list, e

def generate_gcode(layer_params, num_layers, layer_gap, resin_param, num_semi_circle_points, start_x, start_y, x_span, y_span, offset_x):
    e = 0.0
    gcode_list = []

    gcode_list.append("G28 X Y")
    gcode_list.append("G28 Z")
    gcode_list.append("G1 X20 Y60 F600")
    gcode_list.append("G1 Z0 F400")
    gcode_list.append("G92 Z0.2 E0")
    gcode_list.append("G1 E1 F100")

    current_z = 0.2

    for layer in range(num_layers):
        params = layer_params[layer]
        spacing = params['spacing']
        direction_axis = params['direction']
        if layer > 0:
            gcode_list.append("")
            gcode_list.append(f"G92 E0")
            gcode_list.append(f"G1 Z{current_z:.2f} F100")
            gcode_list.append("G1 E1 F100")
        current_z += layer_gap

        if params.get('angle') is not None:
            degree = params['angle']
            layer_gcode, e = generate_angle_gcode(e, spacing, resin_param, num_semi_circle_points, start_x, start_y, x_span, y_span, degree)
        else:
            if direction_axis == 'X':
                if layer % 2 == 0:
                    offset = offset_x
                else:
                    offset = 0
                layer_gcode, e = generate_x_direction_gcode(e, spacing, resin_param, num_semi_circle_points, start_x, start_y, x_span, y_span, offset)
            else:
                layer_gcode, e = generate_y_direction_gcode(e, spacing, resin_param, num_semi_circle_points, start_x, start_y, x_span, y_span)

        gcode_list.extend(layer_gcode)

    gcode_list.append("G92 E0")
    gcode_list.append("G1 Z100 F200")
    gcode_list.append("M400")
    gcode_list.append("M81")

    return gcode_list

def main():
    try:
        num_layers = int(input("请输入想要生成的层数："))
        layer_gap = float(input("请输入每层的间隙："))
        resin_param = float(input("请输入树脂参数J（原始参数0.1025）："))
        start_x = float(input("请输入起始X坐标："))
        start_y = float(input("请输入起始Y坐标："))
        x_span = float(input("请输入X的跨度（通常X比Y大，长方形的底边）："))
        y_span = float(input("请输入Y的跨度（长方形的高）："))
        num_semi_circle_points = int(input("请输入圆滑部分的点数（10就可以）："))
        layer_params = []
        spacing = 0

        for i in range(num_layers):
            print(f"\n请输入第{i+1}层的参数：")
            use_angle = input("是否开启角度打印（Y/N）：").strip().upper() == 'Y'
            direction_axis = input("请输入移动方向（X或Y）：").strip().upper()
            if use_angle:
                degree = float(input("已开启角度模式，请问你想要偏离'direction_axis'多少度？（输入degree，-90°到90°）："))
                spacing = float(input("请输入每行filament的间隔（例如0.8mm）："))
                layer_params.append({'spacing': spacing, 'direction': direction_axis, 'angle': degree})
            else:
                spacing = float(input("请输入每行filament的间隔（例如0.8mm）："))
                layer_params.append({'spacing': spacing, 'direction': direction_axis})

        apply_offset = input("是否对所有X方向的层进行相位偏移？(Y/N): ").strip().upper() == 'Y'
        offset_x = 0.5 * spacing if apply_offset else 0

        gcode_list = generate_gcode(layer_params, num_layers, layer_gap, resin_param, num_semi_circle_points, start_x, start_y, x_span, y_span, offset_x)

        desktop_path = os.path.join(os.path.expanduser("~"), "Desktop")
        file_path = os.path.join(desktop_path, "generated_gcode.gcode")

        with open(file_path, 'w') as file:
            for gcode in gcode_list:
                file.write(gcode + "\n")

        print(f"\n生成的G-code已保存到: {file_path}")

    except Exception as e:
        print(f"发生错误：{e}")

if __name__ == "__main__":
    main()
